<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.system.mapper.StudentMapper">
    
    <resultMap type="Student" id="StudentResult">
        <result property="studentId"    column="student_id"    />
        <result property="studentName"    column="student_name"    />
        <result property="gender"    column="gender"    />
        <result property="phone"    column="phone"    />
        <result property="email"    column="email"    />
        <result property="classId"    column="class_id"    />
        <result property="createTime"    column="create_time"    />
    </resultMap>

    <sql id="selectStudentVo">
        select student_id, student_name, gender, phone, email, class_id, create_time from student
    </sql>

    <select id="selectStudentList" parameterType="Student" resultMap="StudentResult">
        <include refid="selectStudentVo"/>
        <where>  
            <if test="studentName != null  and studentName != ''"> and student_name like concat('%', #{studentName}, '%')</if>
            <if test="gender != null  and gender != ''"> and gender = #{gender}</if>
            <if test="phone != null  and phone != ''"> and phone = #{phone}</if>
            <if test="email != null  and email != ''"> and email = #{email}</if>
            <if test="classId != null "> and class_id = #{classId}</if>
        </where>
    </select>
    
    <select id="selectStudentByStudentId" parameterType="Long" resultMap="StudentResult">
        <include refid="selectStudentVo"/>
        where student_id = #{studentId}
    </select>

    <insert id="insertStudent" parameterType="Student" useGeneratedKeys="true" keyProperty="studentId">
        insert into student
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="studentName != null">student_name,</if>
            <if test="gender != null">gender,</if>
            <if test="phone != null">phone,</if>
            <if test="email != null">email,</if>
            <if test="classId != null">class_id,</if>
            <if test="createTime != null">create_time,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="studentName != null">#{studentName},</if>
            <if test="gender != null">#{gender},</if>
            <if test="phone != null">#{phone},</if>
            <if test="email != null">#{email},</if>
            <if test="classId != null">#{classId},</if>
            <if test="createTime != null">#{createTime},</if>
         </trim>
    </insert>

    <update id="updateStudent" parameterType="Student">
        update student
        <trim prefix="SET" suffixOverrides=",">
            <if test="studentName != null">student_name = #{studentName},</if>
            <if test="gender != null">gender = #{gender},</if>
            <if test="phone != null">phone = #{phone},</if>
            <if test="email != null">email = #{email},</if>
            <if test="classId != null">class_id = #{classId},</if>
            <if test="createTime != null">create_time = #{createTime},</if>
        </trim>
        where student_id = #{studentId}
    </update>

    <delete id="deleteStudentByStudentId" parameterType="Long">
        delete from student where student_id = #{studentId}
    </delete>

    <delete id="deleteStudentByStudentIds" parameterType="String">
        delete from student where student_id in 
        <foreach item="studentId" collection="array" open="(" separator="," close=")">
            #{studentId}
        </foreach>
    </delete>
</mapper>